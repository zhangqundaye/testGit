{
  "name": "tcb-router",
  "version": "1.1.2",
  "description": "A router for tencent cloud functions",
  "main": "./src/index.js",
  "scripts": {
    "test": "jest",
    "test:coveralls": "cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/TencentCloudBase/tcb-router.git"
  },
  "author": {
    "name": "tcb"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/TencentCloudBase/tcb-router/issues"
  },
  "homepage": "https://github.com/flytam/tcb-router#readme",
  "jest": {
    "testEnvironment": "node",
    "roots": [
      "<rootDir>/tests/"
    ],
    "collectCoverage": true,
    "coverageDirectory": "./tests/coverage"
  },
  "devDependencies": {
    "coveralls": "^3.0.2",
    "jest": "^23.4.2"
  },
  "readme": "# tcb-router\n\n[![NPM version][npm-image]][npm-url]\n[![Build Status](https://travis-ci.org/TencentCloudBase/tcb-router.svg?branch=master)](https://travis-ci.org/TencentCloudBase/tcb-router)\n[![npm download][download-image]][download-url]\n[![npm license][license-image]][download-url]\n[![Coverage Status](https://coveralls.io/repos/github/TencentCloudBase/tcb-router/badge.svg?branch=master)](https://coveralls.io/github/TencentCloudBase/tcb-router?branch=master)\n\n[npm-image]: https://img.shields.io/npm/v/tcb-router.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/tcb-router\n[david-image]: https://img.shields.io/david/673800357/tcb-router.svg?style=flat-square\n[download-image]: https://img.shields.io/npm/dm/tcb-router.svg?style=flat-square\n[download-url]: https://npmjs.org/package/tcb-router\n[license-image]: https://img.shields.io/npm/l/tcb-router.svg\n\n> 基于 koa 风格的小程序·云开发云函数轻量级类路由库，主要用于优化服务端函数处理逻辑\n\n## 云函数端\n\n使用\n\n```bash\nnpm install --save tcb-router\n```\n\n```javascript\n// 云函数的 index.js\nconst TcbRouter = require('./router');\n\nexports.main = (event, context) => {\n    const app = new TcbRouter({ event });\n  \n    // app.use 表示该中间件会适用于所有的路由\n    app.use(async (ctx, next) => {\n        ctx.data = {};\n        await next(); // 执行下一中间件\n    });\n\n    // 路由为数组表示，该中间件适用于 user 和 timer 两个路由\n    app.router(['user', 'timer'], async (ctx, next) => {\n        ctx.data.company = 'Tencent';\n        await next(); // 执行下一中间件\n    });\n\n    // 路由为字符串，该中间件只适用于 user 路由\n    app.router('user', async (ctx, next) => {\n        ctx.data.name = 'heyli';\n        await next(); // 执行下一中间件\n    }, async (ctx, next) => {\n        ctx.data.sex = 'male';\n        await next(); // 执行下一中间件\n    }, async (ctx) => {\n        ctx.data.city = 'Foshan';\n        // ctx.body 返回数据到小程序端\n        ctx.body = { code: 0, data: ctx.data};\n    });\n\n    // 路由为字符串，该中间件只适用于 timer 路由\n    app.router('timer', async (ctx, next) => {\n        ctx.data.name = 'flytam';\n        await next(); // 执行下一中间件\n    }, async (ctx, next) => {\n        ctx.data.sex = await new Promise(resolve => {\n        // 等待500ms，再执行下一中间件\n        setTimeout(() => {\n            resolve('male');\n        }, 500);\n        });\n        await next(); // 执行下一中间件\n    }, async (ctx)=>  {\n        ctx.data.city = 'Taishan';\n\n        // ctx.body 返回数据到小程序端\n        ctx.body = { code: 0, data: ctx.data };\n    });\n\n    return app.serve();\n\n}\n\n```\n\ntips: 小程序云函数的 node 环境默认支持 async/await 语法，推荐涉及到的异步操作时像 demo 中那样使用\n\n\n## 小程序端\n\n```javascript\n// 调用名为 router 的云函数，路由名为 user\nwx.cloud.callFunction({\n    // 要调用的云函数名称\n    name: \"router\",\n    // 传递给云函数的参数\n    data: {\n        $url: \"user\", // 要调用的路由的路径，传入准确路径或者通配符*\n        other: \"xxx\"\n    }\n});\n```\n\n## 接口\n\n### 构造函数\n* 参数\n    - Object，存入云函数的 `event` 参数\n\n* 示例\n```js\nconst TcbRouter = require('./router');\nexports.main = (event, context) => {\n    const app = new TcbRouter({ event });\n};\n```\n\n### app.use\n* 参数\n    - Function, 应用于所有路由的中间件\n\n* 示例\n```js\napp.use(async (ctx, next) => {\n    ctx.data = {};\n    await next(); // 执行下一中间件\n});\n```\n\n### app.router\n* 参数\n    - Array|String，路由或路由数组\n    - Function, 应用于对应路由的中间伯\n\n* 示例\n```js\napp.router(['user', 'timer'], async (ctx, next) => {\n    ctx.data = {}；\n    ctx.data.company = 'Tencent';\n    await next(); // 执行下一中间件\n});\n\n// 路由为字符串，该中间件只适用于 user 路由\napp.router('user', async (ctx, next) => {\n    ctx.data.name = 'heyli';\n    ctx.body = {code: 0, data: ctx.data}; // 将数据返回给云函数，用ctx.body\n});\n```\n\n## 测试\n\n```bash\nnpm run test\n```\n",
  "readmeFilename": "README.md",
  "_id": "tcb-router@1.1.2",
  "dist": {
    "shasum": "f755f6c25b0b86fd975677640eaa667cd7b1c0d0"
  },
  "_from": "tcb-router@",
  "_resolved": "https://registry.npmjs.org/tcb-router/-/tcb-router-1.1.2.tgz"
}
